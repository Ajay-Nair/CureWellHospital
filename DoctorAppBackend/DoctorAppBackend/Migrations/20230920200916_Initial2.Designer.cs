// <auto-generated />
using System;
using DoctorAppBackend.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoctorAppBackend.Migrations
{
    [DbContext(typeof(DoctorDbContext))]
    [Migration("20230920200916_Initial2")]
    partial class Initial2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DoctorAppBackend.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"), 1001L, 1);

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId");

                    b.ToTable("doctors");
                });

            modelBuilder.Entity("DoctorAppBackend.Models.DoctorSpecialization", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("SpecializationCode")
                        .HasColumnType("char(3)");

                    b.Property<DateTime>("SpecializationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorId", "SpecializationCode");

                    b.HasIndex("SpecializationCode");

                    b.ToTable("DrSpecializations");
                });

            modelBuilder.Entity("DoctorAppBackend.Models.Specialization", b =>
                {
                    b.Property<string>("SpecializationCode")
                        .HasColumnType("char(3)");

                    b.Property<string>("SpecializationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecializationCode");

                    b.ToTable("specializations");
                });

            modelBuilder.Entity("DoctorAppBackend.Models.Surgery", b =>
                {
                    b.Property<int>("SurgeryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurgeryId"), 5000L, 1);

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<decimal>("EndTime")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("StartTime")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("SurgeryCategory")
                        .IsRequired()
                        .HasColumnType("char(3)");

                    b.Property<DateTime>("SurgeryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SurgeryId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("SurgeryCategory");

                    b.ToTable("surgeries");
                });

            modelBuilder.Entity("DoctorAppBackend.Models.DoctorSpecialization", b =>
                {
                    b.HasOne("DoctorAppBackend.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorAppBackend.Models.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("DoctorAppBackend.Models.Surgery", b =>
                {
                    b.HasOne("DoctorAppBackend.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorAppBackend.Models.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SurgeryCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Specialization");
                });
#pragma warning restore 612, 618
        }
    }
}
